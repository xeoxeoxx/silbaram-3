<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.silbaram.dao.MemberDAO">

    <!--회원가입-->
    <insert id="insertMember" useGeneratedKeys="true" keyProperty="mid">
        INSERT INTO `member` (`userId`, `password`, `nickName`, `name`, `birthDate`, `gender`, `phoneNumber`,
                              `email`, `zipcode`, `address1`, `address2`, `socialLogin`, `isAdmin`)
        VALUES (#{userId}, #{password}, #{nickName}, #{name}, #{birthDate}, #{gender}, #{phoneNumber},
                #{email}, #{zipcode}, #{address1}, #{address2}, #{socialLogin}, #{isAdmin})
    </insert>

    <!--  아이디 중복 조회  -->
    <select id="countMemberByUserId" parameterType="String" resultType="Integer">
        SELECT COUNT(*)
        FROM `member`
        WHERE `userId` = #{userId}
    </select>
    <!--  닉네임 중복 조회  -->
    <select id="countMemberByUserNickName" parameterType="String" resultType="Integer">
        SELECT COUNT(*)
        FROM `member`
        WHERE `nickName` = #{nickName}
    </select>

    <!-- 로그인 -->
    <select id="selectMemberById" resultType="com.project.silbaram.vo.MemberVO">
        SELECT *
        FROM `member`
        WHERE `userId` = #{userId}
    </select>

    <!-- 자동로그인 -->
    <select id="selectMemberByUuid" resultType="com.project.silbaram.vo.MemberVO">
        SELECT * FROM `member` WHERE `uuid` = #{uuid}
    </select>
    <update id="updateUuid">
        UPDATE `member` SET `uuid` = #{uuid} WHERE `mid` = #{mid}
    </update>

    <!-- 회원정보 불러오기 -->
    <select id="selectMemberByMid" resultType="com.project.silbaram.vo.MemberVO">
        SELECT *
        FROM `member`
        WHERE `mid` = #{mid}
    </select>


    <!-- 아이디 찾기 -->
    <select id="selectUserIdByEmail"  resultType="com.project.silbaram.vo.MemberVO">
        SELECT  `userId`
        FROM `member`
        WHERE `email` = #{email}
    </select>

    <!-- 비밀번호 재발급 -->
    <update id="updatePasswordByEmailAndUserId">
        UPDATE `member`
        SET `password` = #{password}
        WHERE `email` = #{email} AND `userId` = #{userId};
    </update>

    <!--  회원정보 수정  -->
    <update id="updateMember">
        UPDATE member
        SET
            nickName = IFNULL(#{nickName}, nickName),
            phoneNumber = IFNULL(#{phoneNumber}, phoneNumber),
            zipcode     = IFNULL(#{zipcode}, zipcode),
            address1    = IFNULL(#{address1}, address1),
            address2    = IFNULL(#{address2}, address2)
        WHERE mid = #{mid};

    </update>

    <!--  비밀번호 수정  -->
    <update id="updatePassword">
        UPDATE member
        SET password    = IFNULL(#{password}, password)
        WHERE mid = #{mid};
    </update>

    <delete id="deleteMember">
        DELETE FROM `member` WHERE `mid` = #{mid};
    </delete>

    <sql id="search">
        <where>
            <if test="types != null and types.length > 0">
                and
                <foreach collection="types" item="type" open="(" close=")" separator=" OR">
                    <if test="type == 't'.toString()">
                        name like concat('%', #{keyword}, '%')
                    </if>
                    <if test="type == 'w'.toString()">
                        publisher like concat('%', #{keyword}, '%')
                    </if>
                    <if test="type == 'c'.toString()">
                        writer like concat('%', #{keyword}, '%')
                    </if>
                    <if test="type == 'tc'.toString()">
                        name like concat('%', #{keyword}, '%')
                        or
                        publisher like concat('%', #{keyword}, '%')
                    </if>
                    <if test="type == 'tcw'.toString()">
                        name like concat('%', #{keyword}, '%')
                        or
                        publisher like concat('%', #{keyword}, '%')
                        or
                        writer like concat('%', #{keyword}, '%')
                    </if>
                </foreach>
            </if>
        </where>
    </sql>

    <select id="list" resultType="com.project.silbaram.vo.MemberVO">
        select * from `member`
        <include refid="search"></include>
        order by mid desc limit #{skip}, #{size}
    </select>

    <select id="getCount" resultType="int">
        select count(mid)
        from `member`
        <include refid="search"></include>
    </select>

    <select id="selectMemberByEmail"  resultType="com.project.silbaram.vo.MemberVO">
        SELECT  *
        FROM `member`
        WHERE `email` = #{email}
    </select>

    <select id="memberById" resultType="com.project.silbaram.vo.MemberVO">
        SELECT *
        FROM `member`
        WHERE `mid` = #{mid}
    </select>


</mapper>
